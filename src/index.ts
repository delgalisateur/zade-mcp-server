#!/usr/bin/env node

/**
 * Zade MCP Server
 * Ce serveur MCP permet d'interagir avec un conteneur Kali Linux via Docker Desktop
 * Il offre un acc√®s complet au mat√©riel de la machine h√¥te
 */

import { Server } from "@modelcontextprotocol/sdk/server/index.js";
import { StdioServerTransport } from "@modelcontextprotocol/sdk/server/stdio.js";
import {
  CallToolRequestSchema,
  ListToolsRequestSchema,
  ErrorCode,
  McpError,
} from "@modelcontextprotocol/sdk/types.js";
import Docker from 'dockerode';

// Interface pour les r√©sultats de commande
interface CommandResult {
  exitCode: number;
  stdout: string;
  stderr: string;
}

// Configuration du serveur
const server = new Server(
  {
    name: "zade",
    version: "0.1.0",
  },
  {
    capabilities: {
      tools: {},
    },
  }
);

// Initialisation du client Docker
const docker = new Docker();
let kaliContainer: any = null;
const CONTAINER_NAME = "kali-mcp-container";

/**
 * D√©marrer ou r√©cup√©rer le conteneur Kali Linux
 */
async function getOrCreateKaliContainer(): Promise<any> {
  try {
    // V√©rifier si le conteneur existe d√©j√†
    const containers = await docker.listContainers({ all: true });
    const existingContainer = containers.find((c: any) => c.Names.includes(`/${CONTAINER_NAME}`));
    
    if (existingContainer) {
      const container = docker.getContainer(existingContainer.Id);
      
      if (existingContainer.State === 'running') {
        console.error(`[MCP] Conteneur Kali d√©j√† en cours d'ex√©cution: ${existingContainer.Id}`);
        return container;
      } else {
        // Red√©marrer le conteneur s'il est arr√™t√©
        await container.start();
        console.error(`[MCP] Conteneur Kali red√©marr√©: ${existingContainer.Id}`);
        return container;
      }
    }

    // Cr√©er un nouveau conteneur Kali avec acc√®s mat√©riel complet
    console.error(`[MCP] Cr√©ation d'un nouveau conteneur Kali...`);
    const container = await docker.createContainer({
      Image: "kalilinux/kali-rolling:latest",
      name: CONTAINER_NAME,
      Cmd: ["/bin/bash"],
      Tty: true,
      OpenStdin: true,
      StdinOnce: false,
      HostConfig: {
        Privileged: true, // Acc√®s mat√©riel complet
        Mounts: [
          {
            Type: "bind",
            Source: "/tmp",
            Target: "/host_tmp"
          }
        ],
        CapAdd: ["ALL"], // Toutes les capacit√©s
        SecurityOpt: ["seccomp=unconfined"], // D√©sactiver seccomp
      },
      WorkingDir: "/root"
    });

    await container.start();
    console.error(`[MCP] Nouveau conteneur Kali d√©marr√©: ${container.id}`);
    
    // Attendre que le conteneur soit pr√™t
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    return container;
  } catch (error) {
    console.error(`[MCP] Erreur lors de la cr√©ation du conteneur Kali:`, error);
    throw new McpError(
      ErrorCode.InternalError,
      `Impossible de cr√©er/d√©marrer le conteneur Kali: ${error}`
    );
  }
}

/**
 * Ex√©cuter une commande dans le conteneur Kali
 */
async function executeCommand(container: any, command: string): Promise<CommandResult> {
  try {
    console.error(`[MCP] Ex√©cution de la commande: ${command}`);
    
    // Cr√©er un stream d'ex√©cution
    const exec = await container.exec({
      Cmd: ["/bin/bash", "-c", command],
      AttachStdout: true,
      AttachStderr: true,
    });

    const stream = await exec.start({ hijack: true, stdin: false });
    
    let stdout = "";
    let stderr = "";
    
    return new Promise((resolve, reject) => {
      stream.on('data', (chunk: Buffer) => {
        const data = chunk.toString();
        // Docker multiplexe stdout et stderr
        if (chunk.length > 8 && chunk[0] === 1) {
          stdout += chunk.slice(8).toString();
        } else if (chunk.length > 8 && chunk[0] === 2) {
          stderr += chunk.slice(8).toString();
        } else {
          stdout += data;
        }
      });

      stream.on('end', async () => {
        try {
          const inspect = await exec.inspect();
          resolve({
            exitCode: inspect.ExitCode || 0,
            stdout: stdout.trim(),
            stderr: stderr.trim()
          });
        } catch (error) {
          reject(error);
        }
      });

      stream.on('error', reject);
    });
  } catch (error) {
    console.error(`[MCP] Erreur lors de l'ex√©cution de la commande:`, error);
    throw new McpError(
      ErrorCode.InternalError,
      `Erreur lors de l'ex√©cution de la commande: ${error}`
    );
  }
}

/**
 * Valider si une commande est potentiellement dangereuse
 */
function validateCommand(command: string): { valid: boolean; warning?: string } {
  const dangerousPatterns = [
    /rm\s+-rf\s+\//,           // rm -rf /
    /mkfs/,                    // Formatage de filesystem
    /dd\s+if=/,                // dd avec entr√©e
    /:\(\)/,                   // Fork bomb
    /shutdown/,                // Arr√™t syst√®me
    /reboot/,                  // Red√©marrage
    /halt/,                    // Arr√™t
    /poweroff/,                // Arr√™t
  ];

  for (const pattern of dangerousPatterns) {
    if (pattern.test(command)) {
      return {
        valid: false,
        warning: `Commande potentiellement dangereuse d√©tect√©e: ${command}`
      };
    }
  }

  return { valid: true };
}

/**
 * Handler pour lister les outils disponibles
 */
server.setRequestHandler(ListToolsRequestSchema, async () => {
  return {
    tools: [
      {
        name: "run_command",
        description: "Ex√©cuter une commande dans un conteneur Kali Linux avec acc√®s mat√©riel complet",
        inputSchema: {
          type: "object",
          properties: {
            command: {
              type: "string",
              description: "Commande √† ex√©cuter dans le conteneur Kali Linux"
            }
          },
          required: ["command"]
        }
      },
      {
        name: "start_kali_container",
        description: "D√©marrer ou cr√©er le conteneur Kali Linux",
        inputSchema: {
          type: "object",
          properties: {}
        }
      },
      {
        name: "stop_kali_container",
        description: "Arr√™ter le conteneur Kali Linux",
        inputSchema: {
          type: "object",
          properties: {}
        }
      },
      {
        name: "get_container_status",
        description: "Obtenir le statut du conteneur Kali Linux",
        inputSchema: {
          type: "object",
          properties: {}
        }
      }
    ]
  };
});

/**
 * Handler pour l'ex√©cution des outils
 */
server.setRequestHandler(CallToolRequestSchema, async (request) => {
  const { name, arguments: args } = request.params;

  try {
    switch (name) {
      case "run_command": {
        const command = String(args?.command);
        
        if (!command) {
          throw new McpError(
            ErrorCode.InvalidParams,
            "Le param√®tre 'command' est requis"
          );
        }

        // Validation de la commande
        const validation = validateCommand(command);
        if (!validation.valid) {
          return {
            content: [{
              type: "text",
              text: `‚ö†Ô∏è ATTENTION: ${validation.warning}\n\nSi vous souhaitez continuer malgr√© cet avertissement, contactez l'administrateur syst√®me.`
            }],
            isError: true
          };
        }

        // S'assurer que le conteneur est d√©marr√©
        if (!kaliContainer) {
          kaliContainer = await getOrCreateKaliContainer();
        }

        // Ex√©cuter la commande
        const result = await executeCommand(kaliContainer, command);

        const output = `üêß Commande: ${command}\n` +
                      `üì§ Code de sortie: ${result.exitCode}\n\n` +
                      `üìã Sortie standard:\n${result.stdout || "(vide)"}\n\n` +
                      `‚ùå Erreurs:\n${result.stderr || "(aucune)"}`;

        return {
          content: [{
            type: "text",
            text: output
          }],
          isError: result.exitCode !== 0
        };
      }

      case "start_kali_container": {
        kaliContainer = await getOrCreateKaliContainer();
        return {
          content: [{
            type: "text",
            text: "‚úÖ Conteneur Kali Linux d√©marr√© avec succ√®s!\n\n" +
                  "üîß Configuration: Acc√®s mat√©riel complet activ√©\n" +
                  "üìÅ Montages: /tmp de l'h√¥te vers /host_tmp dans le conteneur\n" +
                  "üõ°Ô∏è  S√©curit√©: Mode privil√©gi√© avec toutes les capacit√©s"
          }]
        };
      }

      case "stop_kali_container": {
        try {
          // V√©rifier si le conteneur existe dans Docker
          const containers = await docker.listContainers({ all: true });
          const existingContainer = containers.find((c: any) => c.Names.includes(`/${CONTAINER_NAME}`));
          
          if (existingContainer) {
            const container = docker.getContainer(existingContainer.Id);
            
            if (existingContainer.State === 'running') {
              await container.stop();
            }
            
            await container.remove({ force: true });
            kaliContainer = null;
            
            return {
              content: [{
                type: "text",
                text: "‚úÖ Conteneur Kali Linux arr√™t√© et supprim√© avec succ√®s!"
              }]
            };
          } else {
            return {
              content: [{
                type: "text",
                text: "‚ÑπÔ∏è Aucun conteneur Kali Linux trouv√©. Utilisez 'start_kali_container' pour en cr√©er un."
              }]
            };
          }
        } catch (error) {
          console.error("[MCP] Erreur lors de l'arr√™t du conteneur:", error);
          throw new McpError(
            ErrorCode.InternalError,
            `Erreur lors de l'arr√™t du conteneur: ${error}`
          );
        }
      }

      case "get_container_status": {
        try {
          const containers = await docker.listContainers({ all: true });
          const kaliContainerInfo = containers.find((c: any) => c.Names.includes(`/${CONTAINER_NAME}`));
          
          if (kaliContainerInfo) {
            // V√©rifications s√©curis√©es des propri√©t√©s
            const id = kaliContainerInfo.Id ? kaliContainerInfo.Id.substring(0, 12) : "Inconnu";
            const name = (kaliContainerInfo.Names && kaliContainerInfo.Names.length > 0) ? kaliContainerInfo.Names[0] : "Inconnu";
            const state = kaliContainerInfo.State || "Inconnu";
            const image = kaliContainerInfo.Image || "Inconnu";
            const created = kaliContainerInfo.Created || "Inconnu";
            const ports = (kaliContainerInfo.Ports && Array.isArray(kaliContainerInfo.Ports) && kaliContainerInfo.Ports.length > 0) 
              ? JSON.stringify(kaliContainerInfo.Ports) 
              : "Aucun";
            
            const status = `üìä Statut du conteneur Kali Linux:\n\n` +
                          `üÜî ID: ${id}\n` +
                          `üè∑Ô∏è  Nom: ${name}\n` +
                          `üü¢ √âtat: ${state}\n` +
                          `üñºÔ∏è  Image: ${image}\n` +
                          `‚è∞ Cr√©√©: ${created}\n` +
                          `üåê Ports: ${ports}`;
            
            return {
              content: [{
                type: "text",
                text: status
              }]
            };
          } else {
            return {
              content: [{
                type: "text",
                text: "‚ùå Aucun conteneur Kali Linux trouv√©. Utilisez 'start_kali_container' pour en cr√©er un."
              }]
            };
          }
        } catch (error) {
          console.error("[MCP] Erreur d√©taill√©e dans get_container_status:", error);
          throw new McpError(
            ErrorCode.InternalError,
            `Erreur lors de la v√©rification du statut: ${error}`
          );
        }
      }

      default:
        throw new McpError(
          ErrorCode.MethodNotFound,
          `Outil inconnu: ${name}`
        );
    }
  } catch (error) {
    console.error(`[MCP] Erreur dans l'outil ${name}:`, error);
    throw error;
  }
});

/**
 * D√©marrer le serveur MCP
 */
async function main() {
  console.error("[MCP] D√©marrage du serveur Zade MCP...");
  
  const transport = new StdioServerTransport();
  await server.connect(transport);
  
  console.error("[MCP] Serveur Zade MCP d√©marr√© avec succ√®s!");
}

// Gestion des erreurs et arr√™t propre
process.on('SIGINT', async () => {
  console.error("[MCP] Arr√™t du serveur...");
  if (kaliContainer) {
    try {
      await kaliContainer.stop();
      console.error("[MCP] Conteneur Kali arr√™t√©");
    } catch (error) {
      console.error("[MCP] Erreur lors de l'arr√™t du conteneur:", error);
    }
  }
  process.exit(0);
});

main().catch((error) => {
  console.error("[MCP] Erreur du serveur:", error);
  process.exit(1);
});
